// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mosaico.Persistence.SqlServer.Contexts.ProjectContext;

namespace Mosaico.Persistence.SqlServer.Migrations.Project
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20220308095631_InvestorCertificate")]
    partial class InvestorCertificate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("prj")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<string>("VisibleText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Articles", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Crowdsale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HardCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SoftCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupportedStableCoins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Crowdsales", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TypeId");

                    b.ToTable("Documents", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.DocumentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DocumentTemplates", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39e51fcf-afa2-48f6-9a65-ff03f63bf939"),
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse non lectus nec quam cursus eleifend pulvinar non ligula. Maecenas neque velit, sagittis sit amet tincidunt sed, auctor vel nulla. Vestibulum efficitur tempus quam, dignissim consequat dui viverra eget. Pellentesque ullamcorper, nunc a luctus tincidunt, orci urna venenatis velit, nec accumsan odio massa a turpis. Curabitur nec iaculis arcu, sed lobortis lectus. Sed scelerisque diam sed erat scelerisque elementum. Ut pretium nunc justo, vitae ultricies justo commodo vel.",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsEnabled = true,
                            Key = "WHITE_PAPER",
                            Language = "en",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TemplateVersion = "0.1",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("d8a8944c-7a06-46c5-adc4-ae38cfae0da7"),
                            Content = "Cras varius mattis laoreet. Morbi maximus placerat diam, in vulputate massa maximus non. In vitae venenatis risus, vitae luctus lacus. Vestibulum est sapien, interdum sed metus at, blandit volutpat odio. Curabitur nec nisi quam. Nullam sed dolor in nisi maximus sagittis. Quisque volutpat dignissim vehicula. Praesent tortor nibh, hendrerit sed laoreet sed, convallis ac neque. Ut vel erat eu arcu rutrum tempor vel tempor est. Quisque mollis nunc vitae fringilla ultricies. Praesent id justo orci. Duis sit amet dolor quis leo lacinia commodo. Ut ut pretium erat.",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsEnabled = true,
                            Key = "WHITE_PAPER",
                            Language = "pl",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TemplateVersion = "0.1",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("29a30233-58ea-47c1-a5a4-f979e88c7bad"),
                            Content = "Ut quis neque nec odio porta ultrices a vel magna. Pellentesque fringilla suscipit quam nec iaculis. Pellentesque scelerisque, sapien sed eleifend maximus, nisi augue commodo ante, eget finibus lorem purus vitae est. Vivamus euismod fermentum eros, sed vestibulum justo tempor vel. Pellentesque ac fringilla tortor. Nam urna enim, mattis molestie tortor sit amet, eleifend commodo erat. Sed tempor luctus enim, et efficitur mi cursus sit amet. Aliquam scelerisque, est ac posuere viverra, enim velit eleifend justo, vel tristique leo lorem eget enim. Curabitur elit mi, laoreet a mi sed, luctus pellentesque augue. Nunc tellus elit, pretium ac viverra sit amet, commodo vel magna. Donec vitae ultricies arcu.",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsEnabled = true,
                            Key = "TERMS_AND_CONDITIONS",
                            Language = "en",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TemplateVersion = "0.1",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("ec5edbdd-3f32-42d8-9a52-0e6a5753d0cd"),
                            Content = "Sed sollicitudin ornare sem, vitae pellentesque odio. Sed vel elit feugiat, ornare quam dictum, varius lectus. Suspendisse potenti. Pellentesque lobortis eros nec purus consequat tristique. Sed sodales gravida ex ac condimentum. Aenean sit amet neque vel mi sodales volutpat. Aliquam neque urna, pretium ut eros non, ullamcorper dictum nunc. Pellentesque semper, justo ut tincidunt tristique, diam metus posuere augue, sed finibus quam arcu id libero. Nulla vestibulum scelerisque purus id placerat. Integer feugiat viverra consectetur. Nulla sit amet auctor elit, eu tempus velit. Nulla vitae lacus aliquet, aliquet dolor et, vulputate dolor. Etiam arcu leo, lobortis quis massa consectetur, tincidunt accumsan velit.",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsEnabled = true,
                            Key = "TERMS_AND_CONDITIONS",
                            Language = "pl",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TemplateVersion = "0.1",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("69e52c4a-4207-475f-b8e2-551c687d213f"),
                            Content = "Pellentesque ut ipsum a est tincidunt ornare. In euismod ullamcorper venenatis. Nullam at justo nisl. Nunc sed fringilla mi, laoreet facilisis odio. Fusce in neque est. Cras lacus nunc, vulputate ac suscipit eget, volutpat at ante. Sed in justo tempor, venenatis magna a, suscipit orci. In sit amet condimentum elit. Mauris vitae nunc at arcu tincidunt tristique. In hac habitasse platea dictumst. In ac metus sed risus dignissim ullamcorper.",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsEnabled = true,
                            Key = "PRIVACY_POLICY",
                            Language = "en",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TemplateVersion = "0.1",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("6b2390d7-6c25-42de-83a8-b81b025ecc4e"),
                            Content = "Donec justo enim, euismod fringilla velit faucibus, commodo ornare libero. Integer mattis sem quis tellus hendrerit molestie non eget nisl. Nulla a pulvinar felis. Curabitur facilisis quam in ante auctor, nec euismod mi sagittis. Maecenas eget leo vitae nulla pulvinar ultrices. Mauris iaculis fringilla lacinia. Integer et semper mauris. Duis dapibus enim sit amet est efficitur condimentum. Vivamus varius efficitur sapien, eget semper arcu volutpat nec. Praesent efficitur accumsan orci id faucibus. Etiam convallis velit eu odio bibendum, non dignissim turpis gravida. Proin ultricies eros in diam iaculis, ac rutrum nulla sollicitudin. Fusce eu nisi tortor. Nulla hendrerit erat vitae mi efficitur, luctus pulvinar purus pharetra. Cras at imperdiet mauris. Duis sed porta neque.",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsEnabled = true,
                            Key = "PRIVACY_POLICY",
                            Language = "pl",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TemplateVersion = "0.1",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f604d78a-eba1-4f00-a59c-83e54e16686a"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "WHITE_PAPER",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 1000,
                            Title = "Whitepaper",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("0b669ab6-9c3f-4a44-97e4-38d45130a6c3"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "TERMS_AND_CONDITIONS",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 2000,
                            Title = "Terms And Conditions",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("f527695b-73b2-405c-b877-45ba6fd47e26"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "PRIVACY_POLICY",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Order = 3000,
                            Title = "Privacy Policy",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.InvestorCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfigurationJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("SendingEnabledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("InvestorCertificate", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.InvestorCertificateBackground", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InvestorCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvestorCertificateId");

                    b.ToTable("InvestorCertificateBackground", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("PaymentMethods", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("669ac898-d597-46c0-b9ee-1aaca19d6153"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "MOSAICO_WALLET",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Mosaico Wallet",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("4b21fbdf-9d11-48e2-a770-4a0a29f5d693"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "METAMASK",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Metamask",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("051d6c04-551b-4f2f-a8b6-bcce1481306f"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "CREDIT_CARD",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Credit Card",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("6cc3cf07-7e91-4077-b0a6-0b546b79a226"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "KANGA_EXCHANGE",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Kanga Exchange",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CrowdsaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LegacyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SlugInvariant")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleInvariant")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId")
                        .IsUnique()
                        .HasFilter("[PageId] IS NOT NULL");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.HasIndex("SlugInvariant")
                        .IsUnique()
                        .HasFilter("[SlugInvariant] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.HasIndex("TitleInvariant")
                        .IsUnique()
                        .HasFilter("[TitleInvariant] IS NOT NULL");

                    b.ToTable("Projects", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvitationSent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationCode")
                        .IsUnique()
                        .HasFilter("[AuthorizationCode] IS NOT NULL");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Email", "ProjectId")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("ProjectMembers", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.ProjectNewsletterSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("SubscribedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Email", "ProjectId")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("ProjectNewsletterSubscriptions", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.ProjectPaymentMethod", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "PaymentMethodId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("ProjectPaymentMethod");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.ProjectRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ProjectRoles", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f476fa5c-5483-4c88-8d82-280dc95ba424"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "OWNER",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Owner",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("10e1b662-8d5b-4fb8-9632-86cde1e7f5ec"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "MEMBER",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Member",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.ProjectStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ProjectStatuses", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74246a47-a93d-4713-b8c7-4f51263947ce"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "NEW",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "New",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("5730abcf-134b-4116-b186-0e1f54c1d1c6"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "UNDER_REVIEW",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Under review",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("9aa58972-d2c8-467d-a162-7ea773e5aded"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "APPROVED",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Approved",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("7529ec5c-5351-44f9-bea6-e89d27a3bd23"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "DECLINED",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Declined",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("6d150791-925f-4c7e-8f9a-87d31e3aa061"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "IN_PROGRESS",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "In Progress",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("fc4982ea-5b11-4a75-a2d4-4d192ba42848"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "CLOSED",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Closed",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MaximumPurchase")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("MinimumPurchase")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TokenPrice")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("TokenPriceNativeCurrency")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("TokensSupply")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("VestingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Stage", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.StageJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique()
                        .HasFilter("[JobId] IS NOT NULL");

                    b.HasIndex("StageId");

                    b.ToTable("StageJobs", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.StageStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("StageStatuses", "prj");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71fa9290-23e6-49e4-8bf9-b0f1083793c7"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "PENDING",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Pending",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("b13cf50e-6e69-4c9d-a928-dfd340854bf9"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "ACTIVE",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Active",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("a54554e8-e98c-406a-abaf-e383291f029f"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "CLOSED",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Closed",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.About", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Abouts", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.AboutContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AboutId")
                        .IsUnique();

                    b.ToTable("AboutContent");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.AboutContentTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("AboutContentTranslations", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Faqs", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FaqId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FaqId")
                        .IsUnique();

                    b.ToTable("FaqContent");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqContentTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("FaqContentTranslations", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FaqId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FaqId")
                        .IsUnique();

                    b.ToTable("FaqTitle");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqTitleTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("FaqTitleTranslations", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.InvestmentPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TokenAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("InvestmentPackages", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.InvestmentPackageTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Benefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("InvestmentPackageTranslations", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShortDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AboutId")
                        .IsUnique()
                        .HasFilter("[AboutId] IS NOT NULL");

                    b.ToTable("Pages", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.PageCover", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageCovers");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.PageCoverTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("PageCoverTranslations", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.PageTeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageMembers", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.ShortDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("ShortDescription", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.ShortDescriptionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ShortDescriptionTranslations", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.SocialMediaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageSocialMediaLinks");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.SocialMediaLinkTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SocialMediaLinkTranslations", "prj");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Article", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Project", "Project")
                        .WithMany("Articles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Crowdsale", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Project", "Project")
                        .WithOne("Crowdsale")
                        .HasForeignKey("Mosaico.Domain.ProjectManagement.Entities.Crowdsale", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Document", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.DocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.InvestorCertificate", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Project", "Project")
                        .WithOne("InvestorCertificate")
                        .HasForeignKey("Mosaico.Domain.ProjectManagement.Entities.InvestorCertificate", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.InvestorCertificateBackground", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.InvestorCertificate", "InvestorCertificate")
                        .WithMany("Backgrounds")
                        .HasForeignKey("InvestorCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestorCertificate");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Project", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", "Page")
                        .WithOne("Project")
                        .HasForeignKey("Mosaico.Domain.ProjectManagement.Entities.Project", "PageId");

                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.ProjectStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.ProjectMember", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.ProjectRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.ProjectNewsletterSubscription", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Project", "Project")
                        .WithMany("ProjectNewsletterSubscriptions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.ProjectPaymentMethod", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("ProjectPaymentMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Project", "Project")
                        .WithMany("ProjectPaymentMethods")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Stage", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Project", "Project")
                        .WithMany("Stages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.StageStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.StageJob", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.Stage", "Stage")
                        .WithMany("StageJobs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.AboutContent", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.About", "About")
                        .WithOne("Content")
                        .HasForeignKey("Mosaico.Domain.ProjectManagement.Entities.TokenPage.AboutContent", "AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.AboutContentTranslation", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.AboutContent", "AboutContent")
                        .WithMany("Translations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutContent");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Faq", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", "Page")
                        .WithMany("Faqs")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqContent", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Faq", "Faq")
                        .WithOne("Content")
                        .HasForeignKey("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqContent", "FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faq");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqContentTranslation", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqContent", "FaqContent")
                        .WithMany("Translations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqContent");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqTitle", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Faq", "Faq")
                        .WithOne("Title")
                        .HasForeignKey("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqTitle", "FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faq");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqTitleTranslation", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqTitle", "FaqTitle")
                        .WithMany("Translations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqTitle");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.InvestmentPackage", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", "Page")
                        .WithMany("InvestmentPackages")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.InvestmentPackageTranslation", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.InvestmentPackage", "InvestmentPackage")
                        .WithMany("Translations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestmentPackage");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.About", "About")
                        .WithOne("Page")
                        .HasForeignKey("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", "AboutId");

                    b.Navigation("About");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.PageCover", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", "Page")
                        .WithMany("PageCovers")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.PageCoverTranslation", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.PageCover", "PageCover")
                        .WithMany("Translations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PageCover");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.PageTeamMember", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", "Page")
                        .WithMany("TeamMembers")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.ShortDescription", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", "Page")
                        .WithOne("ShortDescription")
                        .HasForeignKey("Mosaico.Domain.ProjectManagement.Entities.TokenPage.ShortDescription", "PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.ShortDescriptionTranslation", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.ShortDescription", "ShortDescription")
                        .WithMany("Translations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShortDescription");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.SocialMediaLink", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", "Page")
                        .WithMany("SocialMediaLinks")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.SocialMediaLinkTranslation", b =>
                {
                    b.HasOne("Mosaico.Domain.ProjectManagement.Entities.TokenPage.SocialMediaLink", "SocialMediaLink")
                        .WithMany("Translations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMediaLink");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.InvestorCertificate", b =>
                {
                    b.Navigation("Backgrounds");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.PaymentMethod", b =>
                {
                    b.Navigation("ProjectPaymentMethods");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Project", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Crowdsale");

                    b.Navigation("Documents");

                    b.Navigation("InvestorCertificate");

                    b.Navigation("Members");

                    b.Navigation("ProjectNewsletterSubscriptions");

                    b.Navigation("ProjectPaymentMethods");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.Stage", b =>
                {
                    b.Navigation("StageJobs");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.About", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.AboutContent", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Faq", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqContent", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.FaqTitle", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.InvestmentPackage", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.Page", b =>
                {
                    b.Navigation("Faqs");

                    b.Navigation("InvestmentPackages");

                    b.Navigation("PageCovers");

                    b.Navigation("Project");

                    b.Navigation("ShortDescription");

                    b.Navigation("SocialMediaLinks");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.PageCover", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.ShortDescription", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Mosaico.Domain.ProjectManagement.Entities.TokenPage.SocialMediaLink", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
