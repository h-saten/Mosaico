// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mosaico.Persistence.SqlServer.Contexts.Wallet;

namespace Mosaico.Persistence.SqlServer.Migrations.Wallet
{
    [DbContext(typeof(WalletContext))]
    [Migration("20220322093913_AddedKPIsTable")]
    partial class AddedKPIsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("wlt")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.CompanyWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastSyncBlockHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CompanyWallets", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.CompanyWalletToToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId", "CompanyWalletId");

                    b.HasIndex("CompanyWalletId");

                    b.ToTable("CompanyWalletToToken", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCrypto")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.ToTable("ExchangeRates", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.ExternalExchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ExternalExchanges", "wlt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc3b535f-59db-4512-ba2c-52243cf4790d"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDisabled = false,
                            LogoUrl = "/assets/media/logos/kanga_logo.svg",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kanga Exchange",
                            Type = 1,
                            Url = "https://kanga.exchange",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.KPI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("KPIs", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.PaymentCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chain")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("NativeChainCurrency")
                        .HasColumnType("bit");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Ticker", "Chain")
                        .IsUnique();

                    b.ToTable("PaymentCurrencies", "wlt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c53a7ba-0d71-47f7-8a80-d1534656be0c"),
                            Chain = "Ethereum",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DecimalPlaces = 18,
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ethereum",
                            NativeChainCurrency = true,
                            Ticker = "ETH",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("13fb17b8-5979-4258-af02-423a58c79878"),
                            Chain = "Ethereum",
                            ContractAddress = "0xdAC17F958D2ee523a2206206994597C13D831ec7",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DecimalPlaces = 6,
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tether USD",
                            NativeChainCurrency = false,
                            Ticker = "USDT",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("f0e5097d-383d-420f-91f0-0fc7a9d2770e"),
                            Chain = "Ethereum",
                            ContractAddress = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DecimalPlaces = 6,
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "USD Coin",
                            NativeChainCurrency = false,
                            Ticker = "USDC",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Staking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CycleLimit")
                        .HasColumnType("decimal(3,2)");

                    b.Property<long>("MaxParticipants")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MaxReward")
                        .HasColumnType("decimal(38,18)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RewardCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RewardCycle")
                        .HasColumnType("int");

                    b.Property<Guid?>("RewardTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RewardCurrencyId");

                    b.HasIndex("RewardTokenId");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("Stakings", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBurnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGovernance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMintable")
                        .HasColumnType("bit");

                    b.Property<string>("LegacyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNormalized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StakingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolNormalized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TokensLeft")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("TotalSupply")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Tokens", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenDistribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TokenAmount")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.ToTable("TokenDistributions", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenHolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.ToTable("TokenHolders");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenHolderScanJobLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LastFetchedBlock")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.ToTable("TokenHolderScanJobLogs");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenToExternalExchange", b =>
                {
                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalExchangeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ListedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TokenId", "ExternalExchangeId");

                    b.HasIndex("ExternalExchangeId");

                    b.ToTable("TokenToExternalExchanges", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("TokenTypes", "wlt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cddc16c2-5969-4160-ac94-67e57fe8c181"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "UTILITY",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Utility",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("062ef44f-592c-4cdc-a1e8-6b2b2521ed16"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "SECURITY",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Security",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("1c12c473-d4f7-4906-9700-b6ec8d2b7437"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "NFT",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "NFT",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConfirmationAttemptsCounter")
                        .HasColumnType("int");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("InitiatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastConfirmationAttemptedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("NextConfirmationAttemptAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("PayedAmount")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<Guid?>("PaymentCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentProcessor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TokenAmount")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)");

                    b.Property<Guid?>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("PaymentCurrencyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transactions", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TransactionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("TransactionStatuses", "wlt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("313f94fb-dc91-4013-9a0b-53dd94f133ec"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "PENDING",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Pending",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("770de2f5-6d2f-4bcf-9b18-73a8eed114ed"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "CONFIRMED",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Confirmed",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("c8605b82-a71a-4c9c-8019-a71154fd103c"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "CANCELED",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Canceled",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("c154cd29-8d6b-48df-86a9-a8c979e68a25"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "FAILED",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Failed",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("TransactionTypes", "wlt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0398047-84cf-4264-9cc5-4bd2c839eaed"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "DEPOSIT",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Deposit",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("077cc88b-5c2a-4fce-9f41-9c6a3fea38f7"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "PURCHASE",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Purchase",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("7fcd586d-10b8-4e5b-a897-ceedc91510e6"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "EXCHANGE",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Exchange",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("06b797db-a303-4cfe-954a-9d18d55a4f3a"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "WITHDRAWAL",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Withdrawal",
                            Version = 0L
                        },
                        new
                        {
                            Id = new Guid("799cac01-4e82-4b82-9a22-2d633c55df6b"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Key = "TRANSFER",
                            ModifiedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Transfer",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Vesting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("Vestings", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.VestingFund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanWithdrawEarly")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Days")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Distribution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DistributionPerPerson")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReleaseCycleInDays")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("SubtractedPercent")
                        .HasColumnType("bigint");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<Guid>("VestingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VestingWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VestingId");

                    b.ToTable("VestingFunds", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.VestingFundInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvitationSent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<Guid>("VestingFundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VestingFundId");

                    b.ToTable("VestingInvitations", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.VestingWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<Guid>("VestingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.ToTable("VestingWallets", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastSyncBlockHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Wallets", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.WalletToToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TokenId", "WalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletToToken", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.WalletToVesting", b =>
                {
                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VestingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Claimed")
                        .HasColumnType("bit");

                    b.HasKey("WalletId", "VestingId");

                    b.HasIndex("VestingId");

                    b.ToTable("WalletToVesting", "wlt");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.CompanyWalletToToken", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.CompanyWallet", "CompanyWallet")
                        .WithMany("Tokens")
                        .HasForeignKey("CompanyWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithMany("CompanyWallets")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyWallet");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Staking", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.PaymentCurrency", "RewardCurrency")
                        .WithMany()
                        .HasForeignKey("RewardCurrencyId");

                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "RewardToken")
                        .WithMany()
                        .HasForeignKey("RewardTokenId");

                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithOne()
                        .HasForeignKey("Mosaico.Domain.Wallet.Entities.Staking", "TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RewardCurrency");

                    b.Navigation("RewardToken");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Token", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.TokenType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenDistribution", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithMany("Distributions")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenHolder", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenHolderScanJobLog", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.TokenToExternalExchange", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.ExternalExchange", "ExternalExchange")
                        .WithMany("Tokens")
                        .HasForeignKey("ExternalExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithMany("Exchanges")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalExchange");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Transaction", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.PaymentCurrency", "PaymentCurrency")
                        .WithMany()
                        .HasForeignKey("PaymentCurrencyId");

                    b.HasOne("Mosaico.Domain.Wallet.Entities.TransactionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.Wallet.Entities.TransactionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentCurrency");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Vesting", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.VestingFund", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.Vesting", "Vesting")
                        .WithMany("Funds")
                        .HasForeignKey("VestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vesting");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.VestingFundInvitation", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.VestingFund", "VestingFund")
                        .WithMany("Invitations")
                        .HasForeignKey("VestingFundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VestingFund");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.VestingWallet", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.WalletToToken", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.Token", "Token")
                        .WithMany("Wallets")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.Wallet.Entities.Wallet", "Wallet")
                        .WithMany("Tokens")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.WalletToVesting", b =>
                {
                    b.HasOne("Mosaico.Domain.Wallet.Entities.VestingWallet", "Vesting")
                        .WithMany("Wallets")
                        .HasForeignKey("VestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mosaico.Domain.Wallet.Entities.Wallet", "Wallet")
                        .WithMany("Vestings")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vesting");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.CompanyWallet", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.ExternalExchange", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Token", b =>
                {
                    b.Navigation("CompanyWallets");

                    b.Navigation("Distributions");

                    b.Navigation("Exchanges");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Vesting", b =>
                {
                    b.Navigation("Funds");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.VestingFund", b =>
                {
                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.VestingWallet", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Mosaico.Domain.Wallet.Entities.Wallet", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("Vestings");
                });
#pragma warning restore 612, 618
        }
    }
}
